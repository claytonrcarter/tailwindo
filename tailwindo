#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputOption;
use Awssat\Tailwindo\ConsoleHelper;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

(new Application('tailwindo', '2.1.0'))
        
    ->register('tailwindo')
     
    ->addArgument('arg', InputArgument::OPTIONAL, 'a file path/a folder path/Bootstrap CSS classes')

    ->addOption('replace', null, InputOption::VALUE_REQUIRED, 'This will overwrite the original file.', false)
   
    ->addOption('recursive', 'r', InputOption::VALUE_OPTIONAL, 'This will recurse through all directories under the main directory', false)
    
    ->addOption('extensions', 'e', InputOption::VALUE_REQUIRED, 'This allows for custom extensions', 'php,html')

    ->addOption('shim', null, InputOption::VALUE_OPTIONAL, 'Create a BS->TW CSS shim file. Don\'t convert anything.', false)

    ->setCode(function (InputInterface $input, OutputInterface $output) {
        // get all of the args and options
        $arg = $input->getFirstArgument();

        $arg = trim($arg);

        $shim = $input->getOption('shim');

        $replace = (bool) $input->getOption('replace') || $shim !== false;

        $is_recursive = (bool) $input->getOption('recursive');
        
        $acceptedExts = array_map('trim', array_map(function ($ext) {
            return trim($ext, '.');
        }, array_filter(explode(',', $input->getOption('extensions')), function ($ext) {
            return !empty($ext);
        })));

        $consoleHelper = new ConsoleHelper($output, $is_recursive, $replace, $acceptedExts);

        if ($shim !== false) {
            $consoleHelper->shimGenerate($shim);
            return 'blah';
        }

        if (empty($arg)) {
            $output->writeln('<comment>Oops! nothing to convert.</comment>');
            return -1;
        }

        //file?
        if (is_file($arg)) {
            return $consoleHelper->fileConvert($arg);
        }

        //folder ?
        if (is_dir($arg)) {
            return $consoleHelper->folderConvert($arg);
        }

        //any html/css classes
        return $consoleHelper->codeConvert($arg);
    })

      ->getApplication()

      ->setDefaultCommand('tailwindo', true)

      ->run();
